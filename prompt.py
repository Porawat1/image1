import streamlit as st
import requests
from PIL import Image, ImageDraw
from io import BytesIO

st.set_page_config(layout="wide")
st.title("üì∏ ‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡∏π‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠")

image_urls = {
    "‡∏ö‡∏π‡∏•‡∏î‡πá‡∏≠‡∏Å": "https://upload.wikimedia.org/wikipedia/commons/b/bf/Bulldog_inglese.jpg",
    "‡πÅ‡∏°‡∏ß": "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/British_shorthair_with_calico_coat_%282%29.jpg/330px-British_shorthair_with_calico_coat_%282%29.jpg",
    "‡πÄ‡∏™‡∏∑‡∏≠": "https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/Panthera_tigris_altaica_female.jpg/500px-Panthera_tigris_altaica_female.jpg"
}

headers = {
    "User-Agent": "MyStreamlitApp/1.0 (example@example.com)"
}

# Setup session state variables
if "selected_image" not in st.session_state:
    st.session_state.selected_image = None
if "cached_images" not in st.session_state:
    st.session_state.cached_images = {}

def load_image_cached(url):
    """‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô cache ‡∏Ç‡∏≠‡∏á session_state"""
    if url in st.session_state.cached_images:
        return st.session_state.cached_images[url]
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        img = Image.open(BytesIO(response.content))
        st.session_state.cached_images[url] = img
        return img
    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return None

def add_grid_to_image(img, grid_spacing=50, line_color=(255, 0, 0, 128)):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡πÅ‡∏Å‡∏ô X ‡πÅ‡∏•‡∏∞ Y ‡∏•‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û"""
    img_with_grid = img.convert("RGBA")
    draw = ImageDraw.Draw(img_with_grid)
    width, height = img_with_grid.size

    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (‡πÅ‡∏Å‡∏ô Y)
    for x in range(0, width, grid_spacing):
        draw.line([(x, 0), (x, height)], fill=line_color, width=1)

    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡πÅ‡∏Å‡∏ô X)
    for y in range(0, height, grid_spacing):
        draw.line([(0, y), (width, y)], fill=line_color, width=1)

    return img_with_grid

def show_thumbnail_page():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏û‡πÄ‡∏•‡πá‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
    st.markdown("### ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏ö‡∏ö‡∏Ç‡∏¢‡∏≤‡∏¢")
    cols = st.columns(len(image_urls))
    for col, (name, url) in zip(cols, image_urls.items()):
        img = load_image_cached(url)
        if img:
            with col:
                st.image(img, caption=name, width=180)
                if st.button(f"‡∏î‡∏π {name}", key=f"btn_{name}"):
                    st.session_state.selected_image = name

def show_full_image_page():
    """‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° slider ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö"""
    name = st.session_state.selected_image
    url = image_urls.get(name)

    if not url:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ")
        return

    img = load_image_cached(url)
    if img:
        st.markdown(f"### ‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà: **{name}**")

        # ‡πÅ‡∏ö‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°, ‡∏Ç‡∏ß‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
        left_col, right_col = st.columns([1, 3])

        with left_col:
            st.subheader("‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û")
            width = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (px)", min_value=100, max_value=1200, value=700, step=10)
            height = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (px)", min_value=100, max_value=1200, value=500, step=10)
            st.markdown("---")
            if st.button("üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û"):
                st.session_state.selected_image = None

        with right_col:
            img_with_grid = add_grid_to_image(img)
            resized_img = img_with_grid.resize((width, height))
            st.image(resized_img, caption=name, use_container_width=False)

# Main app logic
if st.session_state.selected_image is None:
    show_thumbnail_page()
else:
    show_full_image_page()
